using Shouldly;
using Xunit;

namespace CalculatorApp.Test;

public class CalculatorTests
{
    public class Add
    {
        [Theory]
        [InlineData(1, 2, 3)]
        [InlineData(-1, 1, 0)]
        [InlineData(0, 0, 0)]
        [InlineData(0.5, 0.3, 0.8)]
        [InlineData(-2.5, -3.7, -6.2)]
        [InlineData(double.MaxValue, 0, double.MaxValue)]
        public void 正しい引数を渡した場合_正しい結果を返す(double a, double b, double expected)
        {
            ////////////////////////////////////////////////////////////////////////
            // Arrange
            ////////////////////////////////////////////////////////////////////////
            var calculator = new Calculator();

            ////////////////////////////////////////////////////////////////////////
            // Act
            ////////////////////////////////////////////////////////////////////////
            var result = calculator.Add(a, b);

            ////////////////////////////////////////////////////////////////////////
            // Assert
            ////////////////////////////////////////////////////////////////////////
            result.ShouldBe(expected, tolerance: 1e-10);
        }
    }

    public class Subtract
    {
        [Theory]
        [InlineData(5, 3, 2)]
        [InlineData(1, 1, 0)]
        [InlineData(-1, -1, 0)]
        [InlineData(0, 5, -5)]
        [InlineData(0.8, 0.3, 0.5)]
        [InlineData(-2.5, 3.7, -6.2)]
        public void 正しい引数を渡した場合_正しい結果を返す(double a, double b, double expected)
        {
            ////////////////////////////////////////////////////////////////////////
            // Arrange
            ////////////////////////////////////////////////////////////////////////
            var calculator = new Calculator();

            ////////////////////////////////////////////////////////////////////////
            // Act
            ////////////////////////////////////////////////////////////////////////
            var result = calculator.Subtract(a, b);

            ////////////////////////////////////////////////////////////////////////
            // Assert
            ////////////////////////////////////////////////////////////////////////
            result.ShouldBe(expected, tolerance: 1e-10);
        }
    }

    public class Multiply
    {
        [Theory]
        [InlineData(2, 3, 6)]
        [InlineData(-2, 3, -6)]
        [InlineData(-2, -3, 6)]
        [InlineData(0, 5, 0)]
        [InlineData(5, 0, 0)]
        [InlineData(0.5, 0.4, 0.2)]
        [InlineData(1.5, -2, -3)]
        public void 正しい引数を渡した場合_正しい結果を返す(double a, double b, double expected)
        {
            ////////////////////////////////////////////////////////////////////////
            // Arrange
            ////////////////////////////////////////////////////////////////////////
            var calculator = new Calculator();

            ////////////////////////////////////////////////////////////////////////
            // Act
            ////////////////////////////////////////////////////////////////////////
            var result = calculator.Multiply(a, b);

            ////////////////////////////////////////////////////////////////////////
            // Assert
            ////////////////////////////////////////////////////////////////////////
            result.ShouldBe(expected, tolerance: 1e-10);
        }
    }

    public class Divide
    {
        [Theory]
        [InlineData(10, 2, 5)]
        [InlineData(-10, 2, -5)]
        [InlineData(-10, -2, 5)]
        [InlineData(0, 1, 0)]
        [InlineData(1, 0.5, 2)]
        [InlineData(0.8, 0.4, 2)]
        public void 正しい引数を渡した場合_正しい結果を返す(double a, double b, double expected)
        {
            ////////////////////////////////////////////////////////////////////////
            // Arrange
            ////////////////////////////////////////////////////////////////////////
            var calculator = new Calculator();

            ////////////////////////////////////////////////////////////////////////
            // Act
            ////////////////////////////////////////////////////////////////////////
            var result = calculator.Divide(a, b);

            ////////////////////////////////////////////////////////////////////////
            // Assert
            ////////////////////////////////////////////////////////////////////////
            result.ShouldBe(expected, tolerance: 1e-10);
        }

        [Fact]
        public void ゼロ除算で例外が発生すること()
        {
            ////////////////////////////////////////////////////////////////////////
            // Arrange
            ////////////////////////////////////////////////////////////////////////
            var calculator = new Calculator();

            ////////////////////////////////////////////////////////////////////////
            // Act & Assert
            ////////////////////////////////////////////////////////////////////////
            Should.Throw<DivideByZeroException>(() => calculator.Divide(10, 0))
                .Message.ShouldBe("除数は0にできません。");
        }

        [Fact]
        public void 負の数によるゼロ除算で例外が発生すること()
        {
            ////////////////////////////////////////////////////////////////////////
            // Arrange
            ////////////////////////////////////////////////////////////////////////
            var calculator = new Calculator();

            ////////////////////////////////////////////////////////////////////////
            // Act & Assert
            ////////////////////////////////////////////////////////////////////////
            Should.Throw<DivideByZeroException>(() => calculator.Divide(-5, 0))
                .Message.ShouldBe("除数は0にできません。");
        }
    }
}